{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Default": {
		"prefix": "main",
		"body": [
		  "package main",
		  "import (",
		  		"        \"sync\"",
				"        \"os\"",
				"        \"fmt\"",
				"        \"path\"",
				"        \"strings\"",
		  ")",
		  "",
		  "func main() {",
		  "        fmt.Println(strings.Repeat(\"=\", 10),path.Base(os.Args[0]),strings.Repeat(\"=\", 10))",
		  "        var wg sync.WaitGroup",
		  "        wg.Add(1)",
		  "        go func() {",
		  "                defer wg.Done()",
		  "                $0",
		  "        }()",
		  "        wg.Wait()",
		  "        fmt.Println(strings.Repeat(\"=\", 10),path.Base(os.Args[0]),strings.Repeat(\"=\", 10))",
		  "}"
		]
	  },
	  "exec": {
		"prefix": "exec",
		"body": [
		  "package main",
		  "import (",
		  		"        \"sync\"",
				"        \"os\"",
				"        \"fmt\"",
				"        \"path\"",
				"        \"strings\"",
				"        \"os/exec\"",
		  ")",
		  "",
		  "func main() {",
		  "        fmt.Println(strings.Repeat(\"=\", 10),path.Base(os.Args[0]),strings.Repeat(\"=\", 10))",
		  "        var wg sync.WaitGroup",
		  "        wg.Add(1)",
		  "        go func() {",
		  "                defer wg.Done()",
		  "                cmd := exec.Command(\"echo\",\"Dinesh\")",
		  "                stdout, err := cmd.Output()",
	  
		  "                if err != nil {",
		  "                         fmt.Println(err.Error())",
		  "                return",
		  "                }",
		  // Print the output
		  "                fmt.Printf(string(stdout))",
		  "                $0",
		  "        }()",
		  "        wg.Wait()",
		  "        fmt.Println(strings.Repeat(\"=\", 10),path.Base(os.Args[0]),strings.Repeat(\"=\", 10))",
		  "}"
		]
	  }
}
